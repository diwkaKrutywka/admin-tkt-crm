import axios from "axios";
import { notification } from "ant-design-vue";
import config from "../config";
import { useUserStore } from "../store/index";
import { useLanguageStore } from "../store/index";

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞
const Service = axios.create({
  baseURL: config.baseURL,
  timeout: 30000,
  headers: {
    "ngrok-skip-browser-warning": "69420",
    "Content-Type": "application/json;charset=UTF-8",
  },
});

// üß© Request Interceptor: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ —è–∑—ã–∫
Service.interceptors.request.use((config) => {
  const userStore = useUserStore();
  const languageStore = useLanguageStore();

  // –¢–æ–∫–µ–Ω
  if (userStore.accessToken) {
    config.headers.Authorization = `Bearer ${userStore.accessToken}`;
  }

  // –Ø–∑—ã–∫
  if (languageStore.currentLang) {
    config.headers["Accept-Language"] = languageStore.currentLang as
      | "kk"
      | "ru"
      | "en";
  }

  return config;
});

// üîÅ Response Interceptor: –æ–±—Ä–∞–±–æ—Ç–∫–∞ 401 –∏ —Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω–∞
let isRefreshing = false;
let failedQueue: Array<{ resolve: (value: any) => void; reject: (reason?: any) => void }> = [];

const processQueue = (error: any, token: string | null = null) => {
  failedQueue.forEach((prom) => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  failedQueue = [];
};

Service.interceptors.response.use(
  (response) => response,
  async (error: any) => {
    const userStore = useUserStore();
    const originalRequest = error.config;

    if (
      error.response &&
      error.response.status === 401 &&
      !originalRequest._retry
    ) {
      // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ refresh —Ç–æ–∫–µ–Ω, —Ç–æ —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º
      if (originalRequest.url?.includes('/refresh')) {
        userStore.logout();
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        window.location.href = '/login';
        return Promise.reject(error);
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞, —Ç–æ –≤—ã—Ö–æ–¥–∏–º
      if (!userStore.refreshToken) {
        notification.error({
          message: "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —Å–Ω–æ–≤–∞.",
        });
        userStore.logout();
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        window.location.href = '/login';
        return Promise.reject(error);
      }

      // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
      if (isRefreshing) {
        return new Promise(function (resolve, reject) {
          failedQueue.push({ resolve, reject });
        })
          .then((token) => {
            originalRequest.headers.Authorization = `Bearer ${token}`;
            return Service(originalRequest);
          })
          .catch((err) => Promise.reject(err));
      }

      originalRequest._retry = true;
      isRefreshing = true;

      try {
        const response = await axios.post(
          `${config.baseURL}/api/v1/auth/refresh`,
          {
            refresh_token: userStore.refreshToken,
          }
        );

        const newAccessToken = response.data.access_token;
        const newRefreshToken = response.data.refresh_token;

        if (userStore.user) {
          userStore.setUser({
            ...userStore.user,
            access_token: newAccessToken,
            refresh_token: newRefreshToken,
            session_token: userStore.sessionToken,
            user: userStore.user,
          });
        }

        processQueue(null, newAccessToken);

        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
        return Service(originalRequest);
      } catch (err) {
        processQueue(err, null);
        
        // –ï—Å–ª–∏ refresh —Ç–æ–∫–µ–Ω —Ç–æ–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º —Å—Ç–æ—Ä –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
        notification.error({
          message: "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —Å–Ω–æ–≤–∞.",
        });
        userStore.logout();
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        window.location.href = '/login';
        
        return Promise.reject(err);
      } finally {
        isRefreshing = false;
      }
    }

    return Promise.reject(error);
  }
);

export default Service;
